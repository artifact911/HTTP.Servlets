 HTTP/0.9 - первый HTTP (HyperText Transfer Protocol) стандарт, выпущенный в 1991 году. Это был самый простой протокол
     с одним единственным HTTP-методом GET, который возвращал HTML страницу.
    HTTP/1.0 был выпущен в 1996 году. Основные изменения:
        - Работа с разными форматами данных: видео, изображения, текст и т.д.
        - Новые HTTP-методы: POST и HEAD
        - Добавились заголовки в Requests и Responses (header)
        - Коды состояний (2хх, 5хх, ...)
 Один из главных недостатков HTTP/1.0 - это невозможность отправления более одного запроса во время одного TCP соединения.
 Плюс ко всему протокол HTTP не хранит состояний и всю информацию каждый раз передает в заголовке (header). Поэтому
 на смену пришел протокол
    HTTP/1.1 - выпущенный в 1999 году. Основные изменения:
        - Новые HTTP-методы: PUT, PATCH, DELETE, OPTIONS
        - Клиентские cookie (заголовки "Cookie" и "Set-Cookie")
        - Кэширование (заголовок "Cache-Control")
        - Постоянные соединения (ждя закрытия использовался в запросе заголовок "Connection: close")
        - Потоковая передача данных (для определения конца ответа сервера использовался заголовок "Content-Length")
 К сожалению HTTP/1.1 не решил полностью проблем предыдущей версии:
    - Потоковая передача данных не всегда была возможна (невозможно передать в ответе заголовок Content-Length, если
        сервер не может оценить объем данных)
    - Проблема блокировки всей очереди запросов, если медленный или большой запрос блокировал все последующие
 HTTP/2 - был выпущен в 2015 году. Главные отличия от HTTP/1.1:
    - Бинарный вместо текстового
        Бинарный протокол.
        Бинарные сообщения быстрее разбираются автоматически, представляя из себя фреймы (Fames) и потоки (Streams).
        Но в отличии от текстовых, не понятны для чтения человеком. Переходом на бинарный формат, HTTP/2 пытается решить
        проблему выросшей задержки (latency - время от request до response)
        Frames & Streams
        Теперь всё HTTP-сообщения делится на фреймы (HEADERS, DATA, RST_STREAM, PUSH_PROMISE, etc).
        Коллекция таких фреймов - двунаправленный поток (Stream). Следовательно, каждый фрейм содержит идентификатор (id) потока.
        Каждый клиентсикй запрос использует нечетные id, а ответ от сервера - четные.
    - Мультиплексирование (несколько асинхронных запросов через одно TCP-соединение)
        Благодаря бинарному протоколу и представлению данных в виде фреймов и потоков, клиент и сервер могут обмениваться
        сообщениями асинхронно, использую лишь одно TCP соединение.
        Это также решило проблему блокировки очереди запросов, когда медленный или большой запрос блокировал все последующие
    - Server Push (несколько ответов на один запрос)
        Сервер зная, что клиент собирается запросить определенный ресурс, может отправить его сам, не дожидаясь запроса.
        Для этого сервер отправляет специальный фрейм PUSH_PROMISE с таким же id, что и запрос клиента.
        Простыми словами: HTTP/1 делает запрос к страние index.html. Получает ее и в заголовках видит, что для этой страницы
        нужны еще js, css, какие-то картинки. И он сделает в данном случае еще 3 запроса для получения этого всего.
        HTTP/2 отправит сразу все, а именно: клиент отправит фрейм HEADERS на что сервер ответит фреймами PUSH_PROMISE script.js
        и PUSH_PROMISE style.css. Таким образом к клиенту придет сразу все, что нужно для этой страницы.
    - Сжатие заголовков методом HPACK
        Формат сжатия HTTP/2 заголовков HPACK состоит из трех основных частей:
            1. Статическая таблица - общая для всех TCP соединений и содержит 61 часто используемые заголовки, которые
                можно найти в документации протокола
            2. Динамическая таблица - создается для каждого TCP соединения и содержит используемые заголовки во время
                обмена сообщениями (ограниченного размера)
            3. Сжатие заголовков алгоритмом Хаффмана
    - Приоритизация запросов
        Приоритизация потоков
        Клиент может назначить приоритет потоку (stream), добавив соответствующую информацию во фрейме HEADERS (число от
        1 до 256), либо обновить уже созданный поток с помощью фрейма PRIORITY.
        Также каждому потоку может быть дана явная зависимость от другого потока, что вместе с приоритетами представляет
        собой "дерево приоритетов".
    - Безопасность
        Большинство клиентов (браузеров) поддерживают HTTP/2 только если он используется поверх протокола TLS (т.е.
        должен использоваться протокол HTTPS)
        В свою очередь, спецификация не требует данного ограничения
        Сокращение числа подключений ввиду перечисленных преимуществ HTTP/2 приводит к сокращению затратных
        "рукопожатий TLS" (TLS handshake)